// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch","fullTextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Course{
  id String @id @map("_id") @default(auto()) @db.ObjectId
  userId String
  title String 
  description String? 
  imageUrl String? 
  price Float? 
  isPublished Boolean @default(false)

  categoryId String? @db.ObjectId
  category Category? @relation(fields: [categoryId],references: [id])

  chapters Chapter[]
  attachments Attachement[]
  purchases Purchase[]

  quizzes Quiz[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}


model Category{
  id String @id @map("_id") @default(auto()) @db.ObjectId
  name String @unique
  courses Course[]
}
model Attachement{
  id String @id @map("_id") @default(auto()) @db.ObjectId
  name String
  url String 

  courseId String @db.ObjectId
  course Course @relation(fields: [courseId],references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([courseId])
}

model Chapter{
  id String @id @map("_id") @default(auto()) @db.ObjectId
  title String
  description String? 
  videoUrl String? 
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)
  
  muxData MuxData?

  courseId String @db.ObjectId
  course Course @relation(fields: [courseId],references: [id],onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData{
  id String @id @map("_id") @default(auto()) @db.ObjectId
  assetId String
  playbackId String?

  chapterId String @unique @db.ObjectId
  chapter Chapter @relation(fields: [chapterId],references: [id],onDelete: Cascade)

}

model UserProgress{
  id String @id @map("_id") @default(auto()) @db.ObjectId
  userId String

  chapterId String @db.ObjectId
  chapter Chapter @relation(fields: [chapterId],references: [id],onDelete: Cascade)

  isCompleted Boolean @default(false)

  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId,chapterId])

}

model Purchase{
  id String @id @map("_id") @default(auto()) @db.ObjectId
  userId String

  courseId String @db.ObjectId
  course Course @relation(fields: [courseId],references: [id],onDelete: Cascade)


  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@unique([userId,courseId])
  @@index([courseId])
}

model StipeCustomer{
  id String @id @map("_id") @default(auto()) @db.ObjectId
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quiz{
  id String @id @map("_id") @default(auto()) @db.ObjectId
  studentId String
  courseId String @db.ObjectId
  title String 
  description String 
  timer Float
  questions Question[]
  studentMarks StudentMarks[]

  course Course @relation(fields: [courseId],references: [id]) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Question{
  id String @id @map("_id") @default(auto()) @db.ObjectId
  question String  
  answer String
  answerOptions AnswerOptions[]


  quizId String @db.ObjectId
  quiz Quiz? @relation(fields: [quizId],references: [id])

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  @@index([quizId])

}

model AnswerOptions{
  id String @id @map("_id") @default(auto()) @db.ObjectId
  name String
  questionId String @db.ObjectId
  isCorrect Boolean

  question Question @relation(fields: [questionId],references: [id])

  @@index([questionId])
}

model StudentMarks{
  id String @id @map("_id") @default(auto()) @db.ObjectId
  studentId String
  marks Int

  quizzId String @db.ObjectId
  quiz Quiz @relation(fields: [quizzId],references: [id])
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([quizzId])
}
