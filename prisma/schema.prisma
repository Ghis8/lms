// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch","fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_LOCAL")
  relationMode = "prisma"
}

model Course{
  id String @id @default(uuid())
  userId String
  title String @db.Text
  description String? @db.Text
  imageUrl String? @db.Text
  price Float? 
  isPublished Boolean @default(false)

  categoryId String?
  category Category? @relation(fields: [categoryId],references: [id])

  chapters Chapter[]
  attachments Attachement[]
  purchases Purchase[]

  quizzes Quiz[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}


model Category{
  id String @id @default(uuid())
  name String @unique
  courses Course[]
}
model Attachement{
  id String @id @default(uuid())
  name String
  url String @db.Text

  courseId String
  course Course @relation(fields: [courseId],references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([courseId])
}

model Chapter{
  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)
  
  muxData MuxData?

  courseId String 
  course Course @relation(fields: [courseId],references: [id],onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData{
  id String @id @default(uuid())
  assetId String
  playbackId String?

  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId],references: [id],onDelete: Cascade)

}

model UserProgress{
  id String @id @default(uuid())
  userId String

  chapterId String
  chapter Chapter @relation(fields: [chapterId],references: [id],onDelete: Cascade)

  isCompleted Boolean @default(false)

  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId,chapterId])

}

model Purchase{
  id String @id @default(uuid())
  userId String

  courseId String
  course Course @relation(fields: [courseId],references: [id],onDelete: Cascade)


  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@unique([userId,courseId])
  @@index([courseId])
}

model StipeCustomer{
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quiz{
  id String @id @default(uuid())
  studentId String
  courseId String 
  title String @db.Text
  description String @db.Text
  timer Float
  questions Question[]
  studentMarks StudentMarks[]

  course Course @relation(fields: [courseId],references: [id]) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
  @@unique([courseId])
}

model Question{
  id String @id @default(uuid())
  question String @db.Text 
  answer String
  answerOptions AnswerOptions[]


  quizId String
  quiz Quiz? @relation(fields: [quizId],references: [id])

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  @@index([quizId])

}

model AnswerOptions{
  id String @id @default(uuid())
  name String
  questionId String
  isCorrect Boolean

  question Question @relation(fields: [questionId],references: [id])

  @@index([questionId])
}

model StudentMarks{
  id String @id @default(uuid())
  studentId String
  marks Int

  quizzId String
  quiz Quiz @relation(fields: [quizzId],references: [id])
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([quizzId])
}
